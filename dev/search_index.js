var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = GadgetSearch","category":"page"},{"location":"#GadgetSearch","page":"Home","title":"GadgetSearch","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for GadgetSearch.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [GadgetSearch]","category":"page"},{"location":"#GadgetSearch.find_maximal_independent_sets-Tuple{Graphs.SimpleGraphs.SimpleGraph{Int64}}","page":"Home","title":"GadgetSearch.find_maximal_independent_sets","text":"find_maximal_independent_sets(g::SimpleGraph{Int})::Tuple{AbstractMatrix{Int}, Int}\n\nFinds all maximal independent sets (MIS) of a given simple graph g and returns them in a matrix format along with the count of such sets.\n\nArguments\n\ng::SimpleGraph{Int}: The input graph represented as a SimpleGraph object with integer vertex labels.\n\nReturns\n\nA tuple containing:\nAbstractMatrix{Int}: A matrix where each row represents a maximal independent set (MIS) in bitvector format. Each column corresponds to a vertex, and a value of 1 indicates the vertex is part of the MIS.\nInt: The total number of maximal independent sets found.\n\nDetails\n\nThe function computes the maximal independent sets of the input graph by leveraging the equivalence between finding the maximal independent set of a graph and finding the maximal clique of its complement graph. Internally, it uses Graphs.maximal_cliques to compute the maximal cliques of the complement graph and then converts the result into a matrix format.\n\n\n\n\n\n","category":"method"},{"location":"#GadgetSearch.format_grstate_output-Tuple{Vector{Int64}, Int64}","page":"Home","title":"GadgetSearch.format_grstate_output","text":"format_grstate_output(ground_states::Vector{Int}, bit_length::Int)::Vector{String}\n\nFormat the a vector of integers in to a vector of binary strings with a fixed bit length, which is easy to store in a JSON file.\n\nArguments\n\nground_states::Vector{Int}: a vector of decimal integers representing the ground states.\n\n\n\n\n\n","category":"method"},{"location":"#GadgetSearch.format_truth_table-Tuple{AbstractMatrix}","page":"Home","title":"GadgetSearch.format_truth_table","text":"format_truth_table(truth_table::AbstractMatrix)::Vector{Int}\n\nFormat the truth table into a vector of integers, row by row. The truth table is a matrix where each row represents a binary number.\n\nArguments\n\ntruth_table::AbstractMatrix: a matrix where each row represents a binary number, which can be a Matrix{Int} or a BitMatrix.\n\n\n\n\n\n","category":"method"},{"location":"#GadgetSearch.generic_rule-Tuple{Int64, Int64}","page":"Home","title":"GadgetSearch.generic_rule","text":"genericrule(ruleid::Int, bits::Int; show_info::Bool=false)::Vector{Int} \n\nGenerate the decimal vector ground_states of a generic bits-state-constraint with the given rule_id.\n\nNote\n\nState constraints allow for more flexible conditions that determine which states are permitted.\n\n\n\n\n\n","category":"method"},{"location":"#GadgetSearch.generic_rule-Tuple{Int64, Vector{Int64}}","page":"Home","title":"GadgetSearch.generic_rule","text":"generic_rule(rule_id::Int, bit_num::Vector{Int}; show_info::Bool=false)\n            ::Vector{Int}\n\nGenerate the decimal vector ground_states of a generic input_bits-in-output_bits-out gate with the given rule_id.\n\nArguments\n\nrule_id::Int: the ID of the gate.\nbit_num::Vector{Int}: a length-2-vector of two integers representing the number of input and output bits.\n\nKeyword Arguments\n\nshow_info::Bool=false: whether to show the truth table of the gate.\n\nReturns\n\nThe decimal vector of the ground_states.\n\n\n\n\n\n","category":"method"},{"location":"#GadgetSearch.reconstruct_rule_id-Tuple{Vector{Int64}, Vector{Int64}}","page":"Home","title":"GadgetSearch.reconstruct_rule_id","text":"reconstruct_rule_id(ground_states::Vector{Int}, bit_num::Vector{Int}) -> Int\n\nReconstructs a unique gate identifier (rule_id) based on the provided ground_states,  the number of input_bits, and output_bits.\n\nArguments\n\nground_states::Vector{Int}: A vector of integers representing the ground state constraints.\nbit_num::Vector{Int}: A length-2 vector of two integers representing the number of input and output bits.\n\nReturns\n\nInt: A unique integer identifier (rule_id) that encodes the mapping of inputs to outputs  based on the provided ground states.\n\nDetails\n\nEach constraint in ground_states is assumed to encode both input and output bits.\nThe input is extracted by shifting the constraint right by output_bits and applying a mask  to isolate the input_bits.\nThe output is extracted by masking the lower output_bits of the constraint.\nThe rule_id is constructed by combining the outputs, shifted into positions determined by  their corresponding inputs.\n\n\n\n\n\n","category":"method"},{"location":"#GadgetSearch.search_single_rule-Tuple{Dict{String, Graphs.SimpleGraphs.SimpleGraph{Int64}}, Union{Int64, Vector{Int64}}}","page":"Home","title":"GadgetSearch.search_single_rule","text":"search_single_rule(graph_dict::Dict{String, SimpleGraph{Int}}, bit_num::Union{Int, Vector{Int}}; ground_states::Vector{Int}, truth_table::AbstractMatrix=Matrix{Int}(undef, 0, 0), rule_id::Int=0, pin_set::Vector{Int}=Int[], split_idx::Int=0, split_size::Int=0, start_idx::Int=0, end_idx::Int=0, greedy::Bool=false, threshold::Int=0, max_samples::Int=0)\n\nSearches for a single rule that satisfies given constraints for a single graph. \n\nThis particular function is designed for generic constraint search.\n\nArguments\n\ngraph_dict::Dict{String, SimpleGraph{Int}}: The input graph dictionary, where the key is the graph name like \"graph100\" and the value is a Graphs.SimpleGraph object.\n\nKeyword Arguments\n\nsplit_idx::Int = 0(optional): The index of the split file to process. Defaults to 0.\nsplit_size::Int = 0(optional): The maximum number of rows (graphs) in each split file. Defaults to 0. If one wants to process split files manually, please ensure that all dictionaries have the same length split_size except for the last one.\n\n\n\n\n\n","category":"method"},{"location":"#GadgetSearch.search_single_rule-Tuple{Graphs.SimpleGraphs.SimpleGraph{Int64}, Union{Int64, Vector{Int64}}}","page":"Home","title":"GadgetSearch.search_single_rule","text":"search_single_rule(graph::SimpleGraph{Int}, bit_num::Union{Int, Vector{Int}}; ground_states::Vector{Int}, truth_table::AbstractMatrix=Matrix{Int}(undef, 0, 0), rule_id::Int=0, pin_set::Vector{Int}=Int[], greedy::Bool=false, threshold::Int=0, max_samples::Int=0)\n\nSearches for a single rule that satisfies given constraints for a single graph. \n\nThis particular function is designed for generic constraint search.\n\nArguments\n\ngraph::SimpleGraph{Int}: The input graph, represented as a Graphs.SimpleGraph object.\n\n\n\n\n\n","category":"method"},{"location":"#GadgetSearch.search_single_rule-Tuple{String, Union{Int64, Vector{Int64}}}","page":"Home","title":"GadgetSearch.search_single_rule","text":"search_single_rule(graph_path::String, bit_num::Union{Int, Vector{Int}};        ground_states::Vector{Int}=Int[], truth_table::AbstractMatrix=Matrix{Int}(undef, 0, 0), rule_id::Int=0, max_file_size_mb::Int=30, greedy::Bool=false, threshold::Int=0, max_samples::Int=0)\n::Union{gadget, Nothing}\n\nFor a series of ground states, search for a single rule that can satisfy all of them. This particular function is designed for generic constraint search.\n\nArguments\n\ngraph_path::String: the path of the graph *.g6 file.\nbit_num::Union{Int, Vector{Int}}: the number of pins, which also shows the kind of the rule to search for, e.g. 2 for a 2-bit state constraint, [2, 1] for a 2-in-1-out logic gate.\n\nKeyword Arguments\n\nground_states::Vector{Int} = Int[]: the truth table of ground states to satisfy. Note: the default value of the ground states is a vector of decimal numbers, e.g. [0, 1, 2, 3] for binary numbers [00, 01, 10, 11] if we have 2-bit constraint.\ntruth_table::AbstractMatrix{Int} = Matrix{Int}(undef, 0, 0): the truth table of the logic gate to search for. \nrule_id::Int = -1: the ID of the logic gate to search for. This is a reserved parameter for the logic gate search.\npin_set::Vector{Int} = Int[]: the set of pins to search for. If not provided, the function will search for all possible pins.\nmax_file_size_mb::Int = 30: the maximum file size (unit: Mb) to process. If the file size exceeds this value, the function will split the file and process each part separately.\nsplit_size::Int = 700_000: the maximum number of rows (graphs) in each split file.\nstart_idx::Int = 0: the starting index of the graph to search.\nend_idx::Int = 0: the ending index of the graph to search.\ngreedy::Bool = false: a flag indicating whether to use a greedy approach. Defaults to false.\nthreshold::Int = 0: the maximum number of MIS combinations to consider for sampling. Defaults to no sampling.\nmax_samples::Int = 0: the maximum number of samples to generate. Defaults to no sampling.\n\nReturns\n\nReturns an instance of gadget if a valid solution is found; otherwise, returns nothing.\n\nNotes\n\nEither ground_states or truth_table must be provided unless the rule_id of the target logic gate is known, in which case this function can be called directly.\nThe function ensures that the graph is connected before proceeding.\nThe function iterates over all possible pin vectors and checks if they satisfy the given ground states within the maximal independent sets of the graph.\nIf a valid candidate and weight are found, they are returned immediately. \n\n\n\n\n\n","category":"method"},{"location":"#GadgetSearch.show_rule_info-Tuple{Int64, Int64}","page":"Home","title":"GadgetSearch.show_rule_info","text":"show_rule_info(rule_id::Int, bits::Int)\n\nShow the truth table of a generic bits-state-constarint with the given rule_id.\n\n\n\n\n\n","category":"method"},{"location":"#GadgetSearch.show_rule_info-Tuple{Int64, Vector{Int64}}","page":"Home","title":"GadgetSearch.show_rule_info","text":"show_rule_info(rule_id::Int, input_bits::Int, output_bits::Int)\n\nShow the truth table of a generic input_bits-in-output_bits-out gate with the given rule_id.\n\nArguments\n\nrule_id::Int: the ID of the gate.\ninput_bits::Int: the number of input bits.\noutput_bits::Int: the number of output bits.\n\n\n\n\n\n","category":"method"}]
}
